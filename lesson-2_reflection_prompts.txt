>What happens when you initialize a repository? Why do you need to do it?
	when we use git init,it creates a .git directory that keeps track of objects and configuration file.The already contained files are kept as untracked but we can add them later and commit it.
	i.e not any default commit.

>How is the staging area different from the working directory and the repository? What value do
 you think it offers?
 	it allows us to control the size of commit.

>How can you use the staging area to make sure you have one commit per logical change?
	During commit check the diff between staged file and recently commited one.
	Also only stag file that contains only one logical change and related file.

>What are some situations when branches would be helpful in keeping your history organized?
 How would branches help?
 	When you create different versions of the program, like experimental features or foreign language support.
	Branches keep the alternate versions separate from the main version
	You can have a master branch that always works and is "production quality", an then have other branches for what is under development.
>How do the diagrams help you visualize the branch structure?
	They illustrated the idea of reachability, and how you can checkout a previous commit to put yourself in a "detached HEAD state"
	that can be unreachable if you checkout a commit on a named branch.  You can use git checkout -b "new_branch_name" to keep changes in
	a detached HEAD state.
